name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Show CMake Configuration
      shell: bash
      run: cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -LA

    - name: Configure CMake
      shell: bash
      run: cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workflow }}

    - name: Build
      shell: bash
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: ctest --build-config ${{ matrix.build_type }}
      continue-on-error: true

    - name: Check Memory Stats (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        echo "Memory stats:"
        free -h
        echo "Resource limits:"
        ulimit -a

    - name: Enable Core Dumps (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        ulimit -c unlimited
        sudo sysctl -w kernel.core_pattern=core

    - name: Run Executable
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        executable="bandwidth_test"
        if [ "$RUNNER_OS" == "Windows" ]; then
          executable_path="./${{ matrix.build_type }}/${executable}.exe"
        else
          executable_path="./${executable}"
        fi
        echo "Checking if executable exists: $executable_path"
        if [ -f "$executable_path" ]; then
          echo "Executable found, running it"
          echo "CPU info:"
          cat /proc/cpuinfo || echo "CPU info not available on Windows"
          "$executable_path" || echo "Exit code: $?"
        else
          echo "Executable not found: $executable_path"
          exit 1
        fi

    - name: Debug with GDB (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y gdb strace
        executable="./bandwidth_test"
        if [ -f "$executable" ]; then
          echo "run" > gdb_commands.txt
          echo "bt full" >> gdb_commands.txt
          echo "Running GDB:"
          gdb --batch --quiet -x gdb_commands.txt "$executable"
          if [ -f "core" ]; then
            echo "Analyzing core dump:"
            gdb --batch --quiet -x <(echo "bt full") "$executable" core
          fi
          echo "Running strace for system calls:"
          strace -o strace.log "$executable" || echo "Strace exit code: $?"
          cat strace.log || echo "No strace log generated"
        fi
      continue-on-error: true
